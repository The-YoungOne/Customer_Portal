{"ast":null,"code":"var _jsxFileName = \"D:\\\\Downloads\\\\Personal Git\\\\Customer_Portal\\\\Customer_portal\\\\Customer_portal\\\\frontend\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport api from '../api';\nconst AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [userRole, setUserRole] = useState('');\n\n  // Check if user is logged in and validate token with the backend\n  useEffect(() => {\n    const token = localStorage.getItem('jwtToken');\n    if (token) {\n      try {\n        const decodedToken = JSON.parse(atob(token.split('.')[1]));\n        setIsLoggedIn(true);\n        setUserRole(decodedToken.role);\n\n        // Optionally, verify token with the backend\n        api.get('/api/user/profile', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        }).then(response => {\n          setIsLoggedIn(true);\n          setUserRole(response.data.role || decodedToken.role);\n        }).catch(error => {\n          console.error('Token validation failed:', error);\n          logout();\n        });\n      } catch (error) {\n        console.error('Error decoding token:', error);\n        setIsLoggedIn(false);\n        setUserRole('');\n      }\n    }\n  }, []);\n  const login = token => {\n    localStorage.setItem('jwtToken', token);\n    const decodedToken = JSON.parse(atob(token.split('.')[1]));\n    setIsLoggedIn(true);\n    setUserRole(decodedToken.role);\n  };\n  const logout = () => {\n    localStorage.removeItem('jwtToken');\n    setIsLoggedIn(false);\n    setUserRole('');\n  };\n  return /*#__PURE__*/React.createElement(AuthContext.Provider, {\n    value: {\n      isLoggedIn,\n      userRole,\n      login,\n      logout\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 5\n    }\n  }, children);\n};\n_s(AuthProvider, \"AcmOGttDWeGxh3pXcaF2qT6ezNs=\");\n_c = AuthProvider;\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","api","AuthContext","AuthProvider","children","_s","isLoggedIn","setIsLoggedIn","userRole","setUserRole","token","localStorage","getItem","decodedToken","JSON","parse","atob","split","role","get","headers","Authorization","then","response","data","catch","error","console","logout","login","setItem","removeItem","createElement","Provider","value","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Downloads/Personal Git/Customer_Portal/Customer_portal/Customer_portal/frontend/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\nimport api from '../api';\n\nconst AuthContext = createContext();\n\nexport const AuthProvider = ({ children }) => {\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [userRole, setUserRole] = useState('');\n\n  // Check if user is logged in and validate token with the backend\n  useEffect(() => {\n    const token = localStorage.getItem('jwtToken');\n    if (token) {\n      try {\n        const decodedToken = JSON.parse(atob(token.split('.')[1]));\n        setIsLoggedIn(true);\n        setUserRole(decodedToken.role);\n\n        // Optionally, verify token with the backend\n        api.get('/api/user/profile', {\n          headers: { Authorization: `Bearer ${token}` }\n        })\n        .then((response) => {\n          setIsLoggedIn(true);\n          setUserRole(response.data.role || decodedToken.role);\n        })\n        .catch((error) => {\n          console.error('Token validation failed:', error);\n          logout();\n        });\n\n      } catch (error) {\n        console.error('Error decoding token:', error);\n        setIsLoggedIn(false);\n        setUserRole('');\n      }\n    }\n  }, []);\n\n  const login = (token) => {\n    localStorage.setItem('jwtToken', token);\n    const decodedToken = JSON.parse(atob(token.split('.')[1]));\n    setIsLoggedIn(true);\n    setUserRole(decodedToken.role);\n  };\n\n  const logout = () => {\n    localStorage.removeItem('jwtToken');\n    setIsLoggedIn(false);\n    setUserRole('');\n  };\n\n  return (\n    <AuthContext.Provider value={{ isLoggedIn, userRole, login, logout }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport default AuthContext;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AACjE,OAAOC,GAAG,MAAM,QAAQ;AAExB,MAAMC,WAAW,gBAAGJ,aAAa,CAAC,CAAC;AAEnC,OAAO,MAAMK,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAACS,QAAQ,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;;EAE5C;EACAC,SAAS,CAAC,MAAM;IACd,MAAMU,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;IAC9C,IAAIF,KAAK,EAAE;MACT,IAAI;QACF,MAAMG,YAAY,GAAGC,IAAI,CAACC,KAAK,CAACC,IAAI,CAACN,KAAK,CAACO,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC1DV,aAAa,CAAC,IAAI,CAAC;QACnBE,WAAW,CAACI,YAAY,CAACK,IAAI,CAAC;;QAE9B;QACAjB,GAAG,CAACkB,GAAG,CAAC,mBAAmB,EAAE;UAC3BC,OAAO,EAAE;YAAEC,aAAa,EAAE,UAAUX,KAAK;UAAG;QAC9C,CAAC,CAAC,CACDY,IAAI,CAAEC,QAAQ,IAAK;UAClBhB,aAAa,CAAC,IAAI,CAAC;UACnBE,WAAW,CAACc,QAAQ,CAACC,IAAI,CAACN,IAAI,IAAIL,YAAY,CAACK,IAAI,CAAC;QACtD,CAAC,CAAC,CACDO,KAAK,CAAEC,KAAK,IAAK;UAChBC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;UAChDE,MAAM,CAAC,CAAC;QACV,CAAC,CAAC;MAEJ,CAAC,CAAC,OAAOF,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;QAC7CnB,aAAa,CAAC,KAAK,CAAC;QACpBE,WAAW,CAAC,EAAE,CAAC;MACjB;IACF;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMoB,KAAK,GAAInB,KAAK,IAAK;IACvBC,YAAY,CAACmB,OAAO,CAAC,UAAU,EAAEpB,KAAK,CAAC;IACvC,MAAMG,YAAY,GAAGC,IAAI,CAACC,KAAK,CAACC,IAAI,CAACN,KAAK,CAACO,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC1DV,aAAa,CAAC,IAAI,CAAC;IACnBE,WAAW,CAACI,YAAY,CAACK,IAAI,CAAC;EAChC,CAAC;EAED,MAAMU,MAAM,GAAGA,CAAA,KAAM;IACnBjB,YAAY,CAACoB,UAAU,CAAC,UAAU,CAAC;IACnCxB,aAAa,CAAC,KAAK,CAAC;IACpBE,WAAW,CAAC,EAAE,CAAC;EACjB,CAAC;EAED,oBACEZ,KAAA,CAAAmC,aAAA,CAAC9B,WAAW,CAAC+B,QAAQ;IAACC,KAAK,EAAE;MAAE5B,UAAU;MAAEE,QAAQ;MAAEqB,KAAK;MAAED;IAAO,CAAE;IAAAO,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAClEpC,QACmB,CAAC;AAE3B,CAAC;AAACC,EAAA,CApDWF,YAAY;AAAAsC,EAAA,GAAZtC,YAAY;AAsDzB,eAAeD,WAAW;AAAC,IAAAuC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}