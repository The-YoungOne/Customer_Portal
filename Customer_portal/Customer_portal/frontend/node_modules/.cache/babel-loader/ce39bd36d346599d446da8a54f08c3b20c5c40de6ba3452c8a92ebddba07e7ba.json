{"ast":null,"code":"var _jsxFileName = \"D:\\\\Downloads\\\\Personal Git\\\\Customer_Portal\\\\Customer_portal\\\\Customer_portal\\\\frontend\\\\src\\\\components\\\\ConstellationCanvas.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ConstellationCanvas = () => {\n  _s();\n  const canvasRef = useRef(null);\n  const [mousePosition, setMousePosition] = useState({\n    x: -100,\n    y: -100\n  });\n\n  // Set up the canvas and particles\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    const particles = [];\n    const numParticles = 100;\n    const maxLineDistance = 150;\n    const particleRadius = 2;\n    let animationFrameId;\n\n    // Set canvas dimensions\n    canvas.width = window.innerWidth;\n    canvas.height = window.innerHeight;\n\n    // Adjust canvas size on window resize\n    const resizeCanvas = () => {\n      canvas.width = window.innerWidth;\n      canvas.height = window.innerHeight;\n    };\n    window.addEventListener('resize', resizeCanvas);\n\n    // Particle constructor\n    function Particle() {\n      this.x = Math.random() * canvas.width;\n      this.y = Math.random() * canvas.height;\n      this.velocityX = (Math.random() - 0.5) * 2;\n      this.velocityY = (Math.random() - 0.5) * 2;\n      this.color = 'rgba(255, 255, 255, 0.8)';\n    }\n\n    // Particle update logic\n    Particle.prototype.update = function () {\n      // Move toward the mouse if it's nearby\n      const dx = mousePosition.x - this.x;\n      const dy = mousePosition.y - this.y;\n      const distance = Math.sqrt(dx * dx + dy * dy);\n\n      // If the mouse is close enough, adjust particle velocity\n      if (distance < 100) {\n        const angle = Math.atan2(dy, dx);\n        this.velocityX += Math.cos(angle) * 5;\n        this.velocityY += Math.sin(angle) * 0.0105;\n      }\n\n      // Update position based on velocity\n      this.x += this.velocityX;\n      this.y += this.velocityY;\n\n      // Bounce particles off walls\n      if (this.x < 0 || this.x > canvas.width) this.velocityX *= -1;\n      if (this.y < 0 || this.y > canvas.height) this.velocityY *= -1;\n    };\n\n    // Particle draw logic\n    Particle.prototype.draw = function () {\n      ctx.beginPath();\n      ctx.arc(this.x, this.y, particleRadius, 0, Math.PI * 2);\n      ctx.fillStyle = this.color;\n      ctx.fill();\n      ctx.closePath();\n    };\n\n    // Initialize particles\n    function initParticles() {\n      for (let i = 0; i < numParticles; i++) {\n        particles.push(new Particle());\n      }\n    }\n\n    // Draw lines between particles\n    function drawLines() {\n      for (let i = 0; i < particles.length; i++) {\n        for (let j = i + 1; j < particles.length; j++) {\n          const dx = particles[i].x - particles[j].x;\n          const dy = particles[i].y - particles[j].y;\n          const distance = Math.sqrt(dx * dx + dy * dy);\n          if (distance < maxLineDistance) {\n            const opacity = 1 - distance / maxLineDistance;\n            ctx.beginPath();\n            ctx.moveTo(particles[i].x, particles[i].y);\n            ctx.lineTo(particles[j].x, particles[j].y);\n            ctx.strokeStyle = `rgba(255, 255, 255, ${opacity})`;\n            ctx.lineWidth = 0.5;\n            ctx.stroke();\n            ctx.closePath();\n          }\n        }\n      }\n    }\n\n    // Animate particles and draw lines\n    function animate() {\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      particles.forEach(particle => {\n        particle.update();\n        particle.draw();\n      });\n      drawLines();\n      animationFrameId = requestAnimationFrame(animate);\n    }\n\n    // Initialize everything and start animation\n    initParticles();\n    animate();\n\n    // Cleanup on component unmount\n    return () => {\n      window.removeEventListener('resize', resizeCanvas);\n      cancelAnimationFrame(animationFrameId);\n    };\n  }, [mousePosition]); // Add mousePosition to the dependency array\n\n  // Mouse move event listener to update mouse position\n  const handleMouseMove = e => {\n    setMousePosition({\n      x: e.clientX,\n      y: e.clientY\n    });\n  };\n  useEffect(() => {\n    window.addEventListener('mousemove', handleMouseMove);\n    return () => {\n      window.removeEventListener('mousemove', handleMouseMove);\n    };\n  }, []); // Empty dependency array to set up the event listener once\n\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    className: \"absolute inset-0 w-full h-full\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 135,\n    columnNumber: 10\n  }, this);\n};\n_s(ConstellationCanvas, \"pQMGlh47IRnMxhyvo1SpsUusdyI=\");\n_c = ConstellationCanvas;\nexport default ConstellationCanvas;\nvar _c;\n$RefreshReg$(_c, \"ConstellationCanvas\");","map":{"version":3,"names":["React","useRef","useEffect","useState","jsxDEV","_jsxDEV","ConstellationCanvas","_s","canvasRef","mousePosition","setMousePosition","x","y","canvas","current","ctx","getContext","particles","numParticles","maxLineDistance","particleRadius","animationFrameId","width","window","innerWidth","height","innerHeight","resizeCanvas","addEventListener","Particle","Math","random","velocityX","velocityY","color","prototype","update","dx","dy","distance","sqrt","angle","atan2","cos","sin","draw","beginPath","arc","PI","fillStyle","fill","closePath","initParticles","i","push","drawLines","length","j","opacity","moveTo","lineTo","strokeStyle","lineWidth","stroke","animate","clearRect","forEach","particle","requestAnimationFrame","removeEventListener","cancelAnimationFrame","handleMouseMove","e","clientX","clientY","ref","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Downloads/Personal Git/Customer_Portal/Customer_portal/Customer_portal/frontend/src/components/ConstellationCanvas.js"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\r\n\r\nconst ConstellationCanvas = () => {\r\n  const canvasRef = useRef(null);\r\n  const [mousePosition, setMousePosition] = useState({ x: -100, y: -100 });\r\n\r\n  // Set up the canvas and particles\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    const ctx = canvas.getContext('2d');\r\n    const particles = [];\r\n    const numParticles = 100;\r\n    const maxLineDistance = 150;\r\n    const particleRadius = 2;\r\n    let animationFrameId;\r\n\r\n    // Set canvas dimensions\r\n    canvas.width = window.innerWidth;\r\n    canvas.height = window.innerHeight;\r\n\r\n    // Adjust canvas size on window resize\r\n    const resizeCanvas = () => {\r\n      canvas.width = window.innerWidth;\r\n      canvas.height = window.innerHeight;\r\n    };\r\n    window.addEventListener('resize', resizeCanvas);\r\n\r\n    // Particle constructor\r\n    function Particle() {\r\n      this.x = Math.random() * canvas.width;\r\n      this.y = Math.random() * canvas.height;\r\n      this.velocityX = (Math.random() - 0.5) * 2;\r\n      this.velocityY = (Math.random() - 0.5) * 2;\r\n      this.color = 'rgba(255, 255, 255, 0.8)';\r\n    }\r\n\r\n    // Particle update logic\r\n    Particle.prototype.update = function () {\r\n      // Move toward the mouse if it's nearby\r\n      const dx = mousePosition.x - this.x;\r\n      const dy = mousePosition.y - this.y;\r\n      const distance = Math.sqrt(dx * dx + dy * dy);\r\n\r\n      // If the mouse is close enough, adjust particle velocity\r\n      if (distance < 100) {\r\n        const angle = Math.atan2(dy, dx);\r\n        this.velocityX += Math.cos(angle) * 5;\r\n        this.velocityY += Math.sin(angle) * 0.0105;\r\n      }\r\n\r\n      // Update position based on velocity\r\n      this.x += this.velocityX;\r\n      this.y += this.velocityY;\r\n\r\n      // Bounce particles off walls\r\n      if (this.x < 0 || this.x > canvas.width) this.velocityX *= -1;\r\n      if (this.y < 0 || this.y > canvas.height) this.velocityY *= -1;\r\n    };\r\n\r\n    // Particle draw logic\r\n    Particle.prototype.draw = function () {\r\n      ctx.beginPath();\r\n      ctx.arc(this.x, this.y, particleRadius, 0, Math.PI * 2);\r\n      ctx.fillStyle = this.color;\r\n      ctx.fill();\r\n      ctx.closePath();\r\n    };\r\n\r\n    // Initialize particles\r\n    function initParticles() {\r\n      for (let i = 0; i < numParticles; i++) {\r\n        particles.push(new Particle());\r\n      }\r\n    }\r\n\r\n    // Draw lines between particles\r\n    function drawLines() {\r\n      for (let i = 0; i < particles.length; i++) {\r\n        for (let j = i + 1; j < particles.length; j++) {\r\n          const dx = particles[i].x - particles[j].x;\r\n          const dy = particles[i].y - particles[j].y;\r\n          const distance = Math.sqrt(dx * dx + dy * dy);\r\n\r\n          if (distance < maxLineDistance) {\r\n            const opacity = 1 - distance / maxLineDistance;\r\n            ctx.beginPath();\r\n            ctx.moveTo(particles[i].x, particles[i].y);\r\n            ctx.lineTo(particles[j].x, particles[j].y);\r\n            ctx.strokeStyle = `rgba(255, 255, 255, ${opacity})`;\r\n            ctx.lineWidth = 0.5;\r\n            ctx.stroke();\r\n            ctx.closePath();\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // Animate particles and draw lines\r\n    function animate() {\r\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n      particles.forEach((particle) => {\r\n        particle.update();\r\n        particle.draw();\r\n      });\r\n\r\n      drawLines();\r\n\r\n      animationFrameId = requestAnimationFrame(animate);\r\n    }\r\n\r\n    // Initialize everything and start animation\r\n    initParticles();\r\n    animate();\r\n\r\n    // Cleanup on component unmount\r\n    return () => {\r\n      window.removeEventListener('resize', resizeCanvas);\r\n      cancelAnimationFrame(animationFrameId);\r\n    };\r\n  }, [mousePosition]);  // Add mousePosition to the dependency array\r\n\r\n  // Mouse move event listener to update mouse position\r\n  const handleMouseMove = (e) => {\r\n    setMousePosition({ x: e.clientX, y: e.clientY });\r\n  };\r\n\r\n  useEffect(() => {\r\n    window.addEventListener('mousemove', handleMouseMove);\r\n    return () => {\r\n      window.removeEventListener('mousemove', handleMouseMove);\r\n    };\r\n  }, []);  // Empty dependency array to set up the event listener once\r\n\r\n  return <canvas ref={canvasRef} className=\"absolute inset-0 w-full h-full\" />;\r\n};\r\n\r\nexport default ConstellationCanvas;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}